#!/bin/zsh

ROOT=$(echo $0:A | sed -E 's/\/bin\/.*//')
NAME=$(basename ${0})
BIN=${ROOT}/bin

zparseopts -D -E \
  {h,-help}=help \
  {d,-debug}=debug \
  {x,-failfast}=failfast \
  {r,-required}:=required \
  {o,-optional}:=optional \
  {c,-clone}:=clone 

SUPPORTED=(colortest ideographs)

# https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
 C="\e[0m"       # 0  = clear codes
 O="\e[1m"       # 1  = turn on bOld
 k="\e[38;5;0m"  # 0  = blacK
 r="\e[38;5;1m"  # 1  = Red
 g="\e[38;5;2m"  # 2  = Green
 y="\e[38;5;3m"  # 3  = Yellow
 b="\e[38;5;4m"  # 4  = Blue
 m="\e[38;5;5m"  # 5  = Magenta
 c="\e[38;5;6m"  # 6  = Cyan
 w="\e[38;5;7m"  # 7  = White
iK="\e[38;5;8m"  # 8  = Intense blacK (grey)
ir="\e[38;5;9m"  # 9  = Intense Red
ig="\e[38;5;10m" # 10 = Intense Green
iy="\e[38;5;11m" # 11 = Intense Yellow
ib="\e[38;5;12m" # 12 = Intense Blue
im="\e[38;5;13m" # 13 = Inense Magenta
ic="\e[38;5;14m" # 14 = Intense Cyan
iw="\e[38;5;15m" # 15 = Intense White

read -r -d '' HELP <<- EOM
${O}NAME${C}
  ${NAME}

${O}DESCRIPTION
  A simple skeleton script to be modified by the author

${O}SYNOPSIS${C}
  ${0} [${y}--help${C}] \
${y}--required${C} ${c}<required-arg>${C} \
[${y}--optional${C} ${c}<optional-arg>${C}] \
[${y}--colortest${C}] \
[${y}--clone${C}] \
[${y}--ideographs${C}] \

${O}OPTIONS${C}
  ${y}--help${C} (boolean) Prints this help
  ${y}--debug${C} (boolean) Enables debug output
  ${y}--required${C} (string) A required argument
  ${y}--optional${C} (string) An optional argument
  ${y}--colortest${C} (boolean) Dump the colors to the console
  ${y}--clone${C} (path) Dumps the contents of this skeleton file to the supplied file

${O}INSTALLATION${C}
  ${O}ROOT${C}: ${ROOT}
  ${O} BIN${C}: ${BIN}
  ${O} ABS${C}: ${BIN}/${NAME}
EOM

# If --help was specified, show help and exit
function help () { echo "${HELP}" }
[[ -n  "$help"  ]] && help && exit 0

# Build the current guidance
# If any arg passed in, show help+guidance and exit with error
guidance() {
read -r -d '' CONTENT <<- EOC
${O}GUIDANCE${C}
${GUIDANCE}
EOC
  if [ -z "$0" ]; then # Pass an arg to fail fast
    help
    echo ${GUIDANCE}
    exit -1
  fi
}

# https://github.com/pablopunk/colortest/blob/master/colortest
function colortest () {
T='XXX' # The test text
echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";

for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
           '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
           '  36m' '1;36m' '  37m' '1;37m';
  do FG=${FGs// /}
  echo -en " $FGs \033[$FG  $T  "
  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
    do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
  done
  echo;
done
echo
}
[ ! -z "${colortest}" ] && colortest && exit 0

REQUIRED="${required}"
if [ -z "${REQUIRED}" ]; then
  GUIDANCE+="  ${y}--required ${r}is a ${O}required${C}${r} argument${C}\n"
  guidance "${failfast}"
fi

OPTIONAL="${optional}"

CLONE="${clone}"
function clone() {
  TARGET=$(dirname ${CLONE})/$(basename ${CLONE})
  if [ -f ${TARGET} ]; then
    vared -p 'File exists, overwrite? [y/n]: ' -c OVERWRITE
    [[ "${OVERWRITE}" == "y" ]] || exit -1
    echo "Overwriting: ${TARGET}"
  fi
  DIR=$(dirname ${CLONE})
  if [ ! -d ${DIR} ]; then
    mkdir -p ${DIR}
  fi
  cat ${BIN}/${NAME} > ${TARGET}
}
[ ! -z "${clone}" ] && clone


function ideodump() {
  UNI=${1}
  END=$(expr ${2} - 1)
  # Store decimal value of the starting unicode character
  CAL_1=$(echo "obase=10; ibase=16; ${UNI}" | bc)
  # Iterate over days of month
  for i in {0..${END}}; do
    # CALV = 1+0, 1+1, ... , 30+1
    CALV=$(expr ${CAL_1} + ${i})
    # Convert back to base16
    CODE=$(echo "obase=16; ibase=10; ${CALV}" | bc)
    # Print to the console 
    echo -e "\u${CODE}"
  done
}

function ideographs() {
  ideodump "33E0" 31 # Days: ㏠ ... ㏾
  ideodump "3358" 25 # Hours: ㍘ ... ㍰
}

COMMANDS=()
for cmd in $*; do
  COMMANDS+=("$cmd")
done

for COMMAND in $COMMANDS; do
  case "$COMMAND" in
    colortest) colortest ;;
    ideographs) ideographs ;;
    *)
      GUIDANCE+="Unexpected command '${COMMAND}'. Expected on of: ${SUPPORTED}\n"
      guidance "${failfast}"
      ;;
  esac
done

if [ -z "${GUIDANCE}" ]; then
  # We have accumulated guidance
  # Force the guidance to be output with a non-zero string arg
  guidance "dump-all-guidance"
fi